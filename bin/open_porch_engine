#!/usr/bin/env ruby
require "rubygems"

# Look for a Gemfile to load
path = File.expand_path('.')
while (File.exists?(path) and (path != '/'))
  gemfile = "#{path}/Gemfile"
  if (File.exists?(gemfile))
    ENV['BUNDLE_GEMFILE'] = gemfile
    require "bundler/setup"
    break
  else
    path = File.expand_path("..", path)
  end
end


require 'active_record'
require 'action_mailer'
require 'mail'
require 'postageapp'
require 'postageapp/mailer'
require 'net/pop'
require 'yaml'
require 'logger'
require 'iconv'

# ======= Initialize =============================================================

# Set default environment
RAILS_ENV = (ENV['RAILS_ENV'] || 'development').dup unless defined?(RAILS_ENV)
puts "Running in #{RAILS_ENV}"


# Establish a database connection 
db_config = nil
path = File.expand_path('.')
while (File.exists?(path) and (path != '/') and !db_config)
  if (File.exists?("#{path}/config/database.yml"))
    File.open("#{path}/config/database.yml") do |f|
      db_config = YAML.load(f)[RAILS_ENV]
      ActiveRecord::Base.establish_connection(db_config)
    end
  else
    path = "../#{path}"
  end
end

unless (db_config)
  puts "Could not find database.yml"
  exit(-1)
end

ROOT_PATH = path
OPEN_PORCH_CONFIG_FILE = "#{ROOT_PATH}/config/open_porch.yml"

# ==== Request lock =====================================================

# Request a lock on a file to make sure only one instance of this scrip is running
LOCK_FILE = File.expand_path("#{ROOT_PATH}/tmp/pids/open_porch.lock", File.dirname(__FILE__))
fh = File.open(LOCK_FILE, File::RDWR|File::CREAT)
unless fh.flock(File::LOCK_EX|File::LOCK_NB)
  puts 'Already running. Bye!'
  fh.close
  exit(0) 
end


# ==== Load required files =====================================================

requirements = {}

base_path = File.expand_path('..', File.dirname(__FILE__))

# initializers
requirements['/config/initializers/open_porch.rb'] = base_path
requirements['/config/initializers/email_regex.rb'] = base_path

# models
Dir.glob("#{base_path}/app/models/*.rb").each do |file|
  next if %w{address.rb user_authority_check.rb}.include?(File.basename(file))
  requirements["/app/models/#{File.basename(file)}"] = base_path
end

# mailer
requirements['/app/mailers/user_mailer.rb'] = base_path

# Check if any required files are being overriten on the main app
if ROOT_PATH != base_path
  puts "overriding ..." 
  requirements.each do |file, path|
    if File.exists?(ROOT_PATH + file)
      requirements[file] = ROOT_PATH
    end
  end
end

requirements.each do |file, path|
  require path + file
end



# Setup logging
log_file = File.expand_path("#{ROOT_PATH}/log/pop3_#{RAILS_ENV}.log", File.dirname(__FILE__))
ActiveRecord::Base.logger = Logger.new(log_file)



# Setup mailer views
ActionMailer::Base.view_paths = File.expand_path("../app/views", File.dirname(__FILE__))


# ======= Main =============================================================

# Send all scheduled issues
unsent_issues = Issue.scheduled_before(Time.now).all
puts "Found #{unsent_issues.length} unsent issues."
unsent_issues.each do |issue|
  issue.send!
end

# Parse all new messages from POP3 server
EmailMessage.create_from_pop3


# ======= Cleanup =============================================================

# Release lock
fh.flock(File::LOCK_UN)
fh.close
  